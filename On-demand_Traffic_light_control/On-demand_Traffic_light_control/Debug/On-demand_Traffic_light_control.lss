
On-demand_Traffic_light_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000930  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000960  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016c3  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000911  00000000  00000000  000021a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000916  00000000  00000000  00002ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  000033d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000661  00000000  00000000  000035c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000053f  00000000  00000000  00003c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004164  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  74:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_Init>:
Bool car_flag_red = 0;

void APP_Init()
{
	//GREEN CAR
	LED_Init(GPIOA , PIN0);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LED_Init>
	//YELLOW CAR
	LED_Init(GPIOA , PIN1);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LED_Init>
	//RED CAR
	LED_Init(GPIOA , PIN2);
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LED_Init>
	
	//GREEN
	LED_Init(GPIOB , PIN0);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LED_Init>
	//YELLOW
	LED_Init(GPIOB , PIN1);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LED_Init>
	//RED
	LED_Init(GPIOB , PIN2);
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LED_Init>
	
	
	Button_Init(GPIOD , PIN2);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	0e 94 df 00 	call	0x1be	; 0x1be <Button_Init>
	
	Timer0_Init();
  b4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Timer0_Init>
	Start_Timer();
  b8:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Start_Timer>
	
	Interrupt0_INIT();
  bc:	0e 94 4b 02 	call	0x496	; 0x496 <Interrupt0_INIT>
  c0:	08 95       	ret

000000c2 <BLINK_YELLOW>:
	
}

void BLINK_YELLOW ()
{
	YELLOW = 1;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	//YELLOW
	LED_TOGGLE(GPIOB , PIN1);
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	0e 94 ef 00 	call	0x1de	; 0x1de <LED_TOGGLE>
	LED_TOGGLE(GPIOA , PIN1); 
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 ef 00 	call	0x1de	; 0x1de <LED_TOGGLE>
	
	Timer0_Delay(1000);
  d6:	88 ee       	ldi	r24, 0xE8	; 232
  d8:	93 e0       	ldi	r25, 0x03	; 3
  da:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <Timer0_Delay>
	LED_TOGGLE(GPIOA , PIN1);
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 ef 00 	call	0x1de	; 0x1de <LED_TOGGLE>
	LED_TOGGLE(GPIOB , PIN1);
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	0e 94 ef 00 	call	0x1de	; 0x1de <LED_TOGGLE>
	
	
	Timer0_Delay(1000);
  ee:	88 ee       	ldi	r24, 0xE8	; 232
  f0:	93 e0       	ldi	r25, 0x03	; 3
  f2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <Timer0_Delay>
	
	LED_TOGGLE(GPIOB , PIN1);
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	0e 94 ef 00 	call	0x1de	; 0x1de <LED_TOGGLE>
	LED_TOGGLE(GPIOA , PIN1);
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 ef 00 	call	0x1de	; 0x1de <LED_TOGGLE>
	
	Timer0_Delay(1000);
 106:	88 ee       	ldi	r24, 0xE8	; 232
 108:	93 e0       	ldi	r25, 0x03	; 3
 10a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <Timer0_Delay>
	
	LED_TOGGLE(GPIOA , PIN1);
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 ef 00 	call	0x1de	; 0x1de <LED_TOGGLE>
	LED_TOGGLE(GPIOB , PIN1);
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 ef 00 	call	0x1de	; 0x1de <LED_TOGGLE>
	
	
	Timer0_Delay(1000);
 11e:	88 ee       	ldi	r24, 0xE8	; 232
 120:	93 e0       	ldi	r25, 0x03	; 3
 122:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <Timer0_Delay>
	LED_TOGGLE(GPIOB , PIN1);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 ef 00 	call	0x1de	; 0x1de <LED_TOGGLE>
	LED_TOGGLE(GPIOA , PIN1);
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 ef 00 	call	0x1de	; 0x1de <LED_TOGGLE>
	
	
	
	
	Timer0_Delay(1000);
 136:	88 ee       	ldi	r24, 0xE8	; 232
 138:	93 e0       	ldi	r25, 0x03	; 3
 13a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <Timer0_Delay>

	
	YELLOW = 0;
 13e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 142:	08 95       	ret

00000144 <APP_START_NORMAL>:
}


void APP_START_NORMAL()
{ 
	LED_ON(GPIOB,PIN2);
 144:	62 e0       	ldi	r22, 0x02	; 2
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_ON>
	LED_ON(GPIOA,PIN0);  // GREEN LED FOR CARS
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_ON>
	  // RED LED FOR PEDESTRIANS
	//car_flag_green =1;
	//car_flag_red = 0;
	Timer0_Delay(5000);
 154:	88 e8       	ldi	r24, 0x88	; 136
 156:	93 e1       	ldi	r25, 0x13	; 19
 158:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <Timer0_Delay>
	
	// After 5 second  Green led for cars & Red led for ped. switched OFF
	// And yellow LEDs of both will blinking for five second
	
	LED_OFF(GPIOA,PIN0);  // GREEN LED FOR CARS
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_OFF>
	LED_OFF(GPIOB,PIN2);  // RED LED FOR PEDESTRIANS
 164:	62 e0       	ldi	r22, 0x02	; 2
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_OFF>
	BLINK_YELLOW ();
 16c:	0e 94 61 00 	call	0xc2	; 0xc2 <BLINK_YELLOW>
	LED_OFF(GPIOA,PIN1);  // YELLOW LED FOR CARS
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_OFF>
	LED_OFF(GPIOB,PIN1);  // YELLOW LED FOR PEDESTRIANS
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_OFF>
	
	// After yellow blinking for 5 seconds
	// Red led for cars & green led for ped. is on for five seconds
	// then yellow blinking again
	LED_ON(GPIOB,PIN0); 
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_ON>
	LED_ON(GPIOA,PIN2);  // RED LED FOR CARS
 188:	62 e0       	ldi	r22, 0x02	; 2
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_ON>
	 // GREEN LED FOR PEDESTRIANS
		//car_flag_green =0;
		//car_flag_red = 1;
	Timer0_Delay(5000);
 190:	88 e8       	ldi	r24, 0x88	; 136
 192:	93 e1       	ldi	r25, 0x13	; 19
 194:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <Timer0_Delay>
	LED_OFF(GPIOA,PIN2); // RED LED FOR CARS
 198:	62 e0       	ldi	r22, 0x02	; 2
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_OFF>
	LED_OFF(GPIOB,PIN0);  // GREEN LED FOR PEDESTRIANS
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_OFF>
	
	BLINK_YELLOW ();
 1a8:	0e 94 61 00 	call	0xc2	; 0xc2 <BLINK_YELLOW>
	
	LED_OFF(GPIOA,PIN1);  // YELLOW LED FOR CARS
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_OFF>
	LED_OFF(GPIOB,PIN1);  // YELLOW LED FOR PEDESTRIANS
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_OFF>
 1bc:	08 95       	ret

000001be <Button_Init>:

//INITIALIZATION
void Button_Init(_enuGPIOx  Button_Port ,_enuPINx Button_Pin)
{
	//set it as input
	 DIO_vidSetPinMode(Button_Port , Button_Pin , INPUT);
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_vidSetPinMode>
 1c4:	08 95       	ret

000001c6 <LED_Init>:
#include "LED.h"

void LED_Init (_enuGPIOx LED_PORT , _enuPINx LED_PIN)
{
	//MAKE LED OUTPUT
	 DIO_vidSetPinMode(LED_PORT , LED_PIN , OUTPUT);
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_vidSetPinMode>
 1cc:	08 95       	ret

000001ce <LED_ON>:


void LED_ON (_enuGPIOx LED_PORT , _enuPINx LED_PIN)
{
	//MAKE LED HIGH
	 DIO_vidWritePin(LED_PORT, LED_PIN , HIGH);
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	0e 94 81 01 	call	0x302	; 0x302 <DIO_vidWritePin>
 1d4:	08 95       	ret

000001d6 <LED_OFF>:
}

void LED_OFF (_enuGPIOx LED_PORT , _enuPINx LED_PIN)
{
	//MAKE LED LOW
	 DIO_vidWritePin(LED_PORT, LED_PIN , LOW);
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	0e 94 81 01 	call	0x302	; 0x302 <DIO_vidWritePin>
 1dc:	08 95       	ret

000001de <LED_TOGGLE>:


void LED_TOGGLE (_enuGPIOx LED_PORT , _enuPINx LED_PIN)
{
	//TOGGLE LED
	 DIO_toggle(LED_PORT ,LED_PIN);
 1de:	0e 94 0b 02 	call	0x416	; 0x416 <DIO_toggle>
 1e2:	08 95       	ret

000001e4 <main>:

 
int main(void)
{
	
	APP_Init();
 1e4:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_Init>

    while (1) 
    {
			APP_START_NORMAL();
 1e8:	0e 94 a2 00 	call	0x144	; 0x144 <APP_START_NORMAL>
 1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <main+0x4>

000001ee <DIO_vidSetPinMode>:
			* value=LOGIC_HIGH;
			//	return  value	;
		}
		else
		{
			* value= LOGIC_LOW;
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	41 f1       	breq	.+80     	; 0x242 <DIO_vidSetPinMode+0x54>
 1f2:	38 f0       	brcs	.+14     	; 0x202 <DIO_vidSetPinMode+0x14>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	09 f4       	brne	.+2      	; 0x1fa <DIO_vidSetPinMode+0xc>
 1f8:	44 c0       	rjmp	.+136    	; 0x282 <DIO_vidSetPinMode+0x94>
 1fa:	83 30       	cpi	r24, 0x03	; 3
 1fc:	09 f4       	brne	.+2      	; 0x200 <DIO_vidSetPinMode+0x12>
 1fe:	61 c0       	rjmp	.+194    	; 0x2c2 <DIO_vidSetPinMode+0xd4>
 200:	08 95       	ret
 202:	41 30       	cpi	r20, 0x01	; 1
 204:	71 f4       	brne	.+28     	; 0x222 <DIO_vidSetPinMode+0x34>
 206:	2a b3       	in	r18, 0x1a	; 26
 208:	3b b3       	in	r19, 0x1b	; 27
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_vidSetPinMode+0x26>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_vidSetPinMode+0x22>
 218:	82 2b       	or	r24, r18
 21a:	93 2b       	or	r25, r19
 21c:	9b bb       	out	0x1b, r25	; 27
 21e:	8a bb       	out	0x1a, r24	; 26
 220:	08 95       	ret
 222:	2a b3       	in	r18, 0x1a	; 26
 224:	3b b3       	in	r19, 0x1b	; 27
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_vidSetPinMode+0x42>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_vidSetPinMode+0x3e>
 234:	80 95       	com	r24
 236:	90 95       	com	r25
 238:	82 23       	and	r24, r18
 23a:	93 23       	and	r25, r19
 23c:	9b bb       	out	0x1b, r25	; 27
 23e:	8a bb       	out	0x1a, r24	; 26
 240:	08 95       	ret
 242:	41 30       	cpi	r20, 0x01	; 1
 244:	71 f4       	brne	.+28     	; 0x262 <DIO_vidSetPinMode+0x74>
 246:	27 b3       	in	r18, 0x17	; 23
 248:	38 b3       	in	r19, 0x18	; 24
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_vidSetPinMode+0x66>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_vidSetPinMode+0x62>
 258:	82 2b       	or	r24, r18
 25a:	93 2b       	or	r25, r19
 25c:	98 bb       	out	0x18, r25	; 24
 25e:	87 bb       	out	0x17, r24	; 23
 260:	08 95       	ret
 262:	27 b3       	in	r18, 0x17	; 23
 264:	38 b3       	in	r19, 0x18	; 24
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_vidSetPinMode+0x82>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_vidSetPinMode+0x7e>
 274:	80 95       	com	r24
 276:	90 95       	com	r25
 278:	82 23       	and	r24, r18
 27a:	93 23       	and	r25, r19
 27c:	98 bb       	out	0x18, r25	; 24
 27e:	87 bb       	out	0x17, r24	; 23
 280:	08 95       	ret
 282:	41 30       	cpi	r20, 0x01	; 1
 284:	71 f4       	brne	.+28     	; 0x2a2 <DIO_vidSetPinMode+0xb4>
 286:	24 b3       	in	r18, 0x14	; 20
 288:	35 b3       	in	r19, 0x15	; 21
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_vidSetPinMode+0xa6>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_vidSetPinMode+0xa2>
 298:	82 2b       	or	r24, r18
 29a:	93 2b       	or	r25, r19
 29c:	95 bb       	out	0x15, r25	; 21
 29e:	84 bb       	out	0x14, r24	; 20
 2a0:	08 95       	ret
 2a2:	24 b3       	in	r18, 0x14	; 20
 2a4:	35 b3       	in	r19, 0x15	; 21
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_vidSetPinMode+0xc2>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_vidSetPinMode+0xbe>
 2b4:	80 95       	com	r24
 2b6:	90 95       	com	r25
 2b8:	82 23       	and	r24, r18
 2ba:	93 23       	and	r25, r19
 2bc:	95 bb       	out	0x15, r25	; 21
 2be:	84 bb       	out	0x14, r24	; 20
 2c0:	08 95       	ret
 2c2:	41 30       	cpi	r20, 0x01	; 1
 2c4:	71 f4       	brne	.+28     	; 0x2e2 <DIO_vidSetPinMode+0xf4>
 2c6:	21 b3       	in	r18, 0x11	; 17
 2c8:	32 b3       	in	r19, 0x12	; 18
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_vidSetPinMode+0xe6>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_vidSetPinMode+0xe2>
 2d8:	82 2b       	or	r24, r18
 2da:	93 2b       	or	r25, r19
 2dc:	92 bb       	out	0x12, r25	; 18
 2de:	81 bb       	out	0x11, r24	; 17
 2e0:	08 95       	ret
 2e2:	21 b3       	in	r18, 0x11	; 17
 2e4:	32 b3       	in	r19, 0x12	; 18
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_vidSetPinMode+0x102>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_vidSetPinMode+0xfe>
 2f4:	80 95       	com	r24
 2f6:	90 95       	com	r25
 2f8:	82 23       	and	r24, r18
 2fa:	93 23       	and	r25, r19
 2fc:	92 bb       	out	0x12, r25	; 18
 2fe:	81 bb       	out	0x11, r24	; 17
 300:	08 95       	ret

00000302 <DIO_vidWritePin>:
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	41 f1       	breq	.+80     	; 0x356 <DIO_vidWritePin+0x54>
 306:	38 f0       	brcs	.+14     	; 0x316 <DIO_vidWritePin+0x14>
 308:	82 30       	cpi	r24, 0x02	; 2
 30a:	09 f4       	brne	.+2      	; 0x30e <DIO_vidWritePin+0xc>
 30c:	44 c0       	rjmp	.+136    	; 0x396 <DIO_vidWritePin+0x94>
 30e:	83 30       	cpi	r24, 0x03	; 3
 310:	09 f4       	brne	.+2      	; 0x314 <DIO_vidWritePin+0x12>
 312:	61 c0       	rjmp	.+194    	; 0x3d6 <DIO_vidWritePin+0xd4>
 314:	08 95       	ret
 316:	41 30       	cpi	r20, 0x01	; 1
 318:	71 f4       	brne	.+28     	; 0x336 <DIO_vidWritePin+0x34>
 31a:	2b b3       	in	r18, 0x1b	; 27
 31c:	3c b3       	in	r19, 0x1c	; 28
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_vidWritePin+0x26>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	6a 95       	dec	r22
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_vidWritePin+0x22>
 32c:	82 2b       	or	r24, r18
 32e:	93 2b       	or	r25, r19
 330:	9c bb       	out	0x1c, r25	; 28
 332:	8b bb       	out	0x1b, r24	; 27
 334:	08 95       	ret
 336:	2b b3       	in	r18, 0x1b	; 27
 338:	3c b3       	in	r19, 0x1c	; 28
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_vidWritePin+0x42>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_vidWritePin+0x3e>
 348:	80 95       	com	r24
 34a:	90 95       	com	r25
 34c:	82 23       	and	r24, r18
 34e:	93 23       	and	r25, r19
 350:	9c bb       	out	0x1c, r25	; 28
 352:	8b bb       	out	0x1b, r24	; 27
 354:	08 95       	ret
 356:	41 30       	cpi	r20, 0x01	; 1
 358:	71 f4       	brne	.+28     	; 0x376 <DIO_vidWritePin+0x74>
 35a:	28 b3       	in	r18, 0x18	; 24
 35c:	39 b3       	in	r19, 0x19	; 25
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_vidWritePin+0x66>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	6a 95       	dec	r22
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_vidWritePin+0x62>
 36c:	82 2b       	or	r24, r18
 36e:	93 2b       	or	r25, r19
 370:	99 bb       	out	0x19, r25	; 25
 372:	88 bb       	out	0x18, r24	; 24
 374:	08 95       	ret
 376:	28 b3       	in	r18, 0x18	; 24
 378:	39 b3       	in	r19, 0x19	; 25
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_vidWritePin+0x82>
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	6a 95       	dec	r22
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_vidWritePin+0x7e>
 388:	80 95       	com	r24
 38a:	90 95       	com	r25
 38c:	82 23       	and	r24, r18
 38e:	93 23       	and	r25, r19
 390:	99 bb       	out	0x19, r25	; 25
 392:	88 bb       	out	0x18, r24	; 24
 394:	08 95       	ret
 396:	41 30       	cpi	r20, 0x01	; 1
 398:	71 f4       	brne	.+28     	; 0x3b6 <DIO_vidWritePin+0xb4>
 39a:	25 b3       	in	r18, 0x15	; 21
 39c:	36 b3       	in	r19, 0x16	; 22
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_vidWritePin+0xa6>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_vidWritePin+0xa2>
 3ac:	82 2b       	or	r24, r18
 3ae:	93 2b       	or	r25, r19
 3b0:	96 bb       	out	0x16, r25	; 22
 3b2:	85 bb       	out	0x15, r24	; 21
 3b4:	08 95       	ret
 3b6:	25 b3       	in	r18, 0x15	; 21
 3b8:	36 b3       	in	r19, 0x16	; 22
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_vidWritePin+0xc2>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_vidWritePin+0xbe>
 3c8:	80 95       	com	r24
 3ca:	90 95       	com	r25
 3cc:	82 23       	and	r24, r18
 3ce:	93 23       	and	r25, r19
 3d0:	96 bb       	out	0x16, r25	; 22
 3d2:	85 bb       	out	0x15, r24	; 21
 3d4:	08 95       	ret
 3d6:	41 30       	cpi	r20, 0x01	; 1
 3d8:	71 f4       	brne	.+28     	; 0x3f6 <DIO_vidWritePin+0xf4>
 3da:	22 b3       	in	r18, 0x12	; 18
 3dc:	33 b3       	in	r19, 0x13	; 19
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_vidWritePin+0xe6>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_vidWritePin+0xe2>
 3ec:	82 2b       	or	r24, r18
 3ee:	93 2b       	or	r25, r19
 3f0:	93 bb       	out	0x13, r25	; 19
 3f2:	82 bb       	out	0x12, r24	; 18
 3f4:	08 95       	ret
 3f6:	22 b3       	in	r18, 0x12	; 18
 3f8:	33 b3       	in	r19, 0x13	; 19
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	6a 95       	dec	r22
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	80 95       	com	r24
 40a:	90 95       	com	r25
 40c:	82 23       	and	r24, r18
 40e:	93 23       	and	r25, r19
 410:	93 bb       	out	0x13, r25	; 19
 412:	82 bb       	out	0x12, r24	; 18
 414:	08 95       	ret

00000416 <DIO_toggle>:



void DIO_toggle(_enuGPIOx enuPortNum , _enuPINx enuPinNum)
{
	switch(enuPortNum){
 416:	81 30       	cpi	r24, 0x01	; 1
 418:	a1 f0       	breq	.+40     	; 0x442 <DIO_toggle+0x2c>
 41a:	28 f0       	brcs	.+10     	; 0x426 <DIO_toggle+0x10>
 41c:	82 30       	cpi	r24, 0x02	; 2
 41e:	f9 f0       	breq	.+62     	; 0x45e <DIO_toggle+0x48>
 420:	83 30       	cpi	r24, 0x03	; 3
 422:	59 f1       	breq	.+86     	; 0x47a <DIO_toggle+0x64>
 424:	08 95       	ret
		case GPIOA:
		TOGGLE_BIT(PORTA,enuPinNum);
 426:	2b b3       	in	r18, 0x1b	; 27
 428:	3c b3       	in	r19, 0x1c	; 28
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_toggle+0x1e>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_toggle+0x1a>
 438:	82 27       	eor	r24, r18
 43a:	93 27       	eor	r25, r19
 43c:	9c bb       	out	0x1c, r25	; 28
 43e:	8b bb       	out	0x1b, r24	; 27
		break;
 440:	08 95       	ret
		case GPIOB:
		TOGGLE_BIT(PORTB,enuPinNum);
 442:	28 b3       	in	r18, 0x18	; 24
 444:	39 b3       	in	r19, 0x19	; 25
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_toggle+0x3a>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	6a 95       	dec	r22
 452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_toggle+0x36>
 454:	82 27       	eor	r24, r18
 456:	93 27       	eor	r25, r19
 458:	99 bb       	out	0x19, r25	; 25
 45a:	88 bb       	out	0x18, r24	; 24
		break;
 45c:	08 95       	ret
		case GPIOC:
		TOGGLE_BIT(PORTC,enuPinNum);
 45e:	25 b3       	in	r18, 0x15	; 21
 460:	36 b3       	in	r19, 0x16	; 22
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 c0       	rjmp	.+4      	; 0x46c <DIO_toggle+0x56>
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	6a 95       	dec	r22
 46e:	e2 f7       	brpl	.-8      	; 0x468 <DIO_toggle+0x52>
 470:	82 27       	eor	r24, r18
 472:	93 27       	eor	r25, r19
 474:	96 bb       	out	0x16, r25	; 22
 476:	85 bb       	out	0x15, r24	; 21
		break;
 478:	08 95       	ret
		case GPIOD:
		TOGGLE_BIT(PORTD,enuPinNum);
 47a:	22 b3       	in	r18, 0x12	; 18
 47c:	33 b3       	in	r19, 0x13	; 19
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_toggle+0x72>
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	6a 95       	dec	r22
 48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_toggle+0x6e>
 48c:	82 27       	eor	r24, r18
 48e:	93 27       	eor	r25, r19
 490:	93 bb       	out	0x13, r25	; 19
 492:	82 bb       	out	0x12, r24	; 18
 494:	08 95       	ret

00000496 <Interrupt0_INIT>:


void Interrupt0_INIT (void)
{
	// enable global interrupt: by setting bit 7 in SREG to 1 or sei
	sei();
 496:	78 94       	sei
	// Choose the external interrupt sense: Rising edge
	MCUCR |= (1 << ISC00)| (1 << ISC01);
 498:	85 b7       	in	r24, 0x35	; 53
 49a:	83 60       	ori	r24, 0x03	; 3
 49c:	85 bf       	out	0x35, r24	; 53

	// enable external interrupt 0: INT0
	GICR |= ( 1 << INT0 );
 49e:	8b b7       	in	r24, 0x3b	; 59
 4a0:	80 64       	ori	r24, 0x40	; 64
 4a2:	8b bf       	out	0x3b, r24	; 59
 4a4:	08 95       	ret

000004a6 <Timer0_Init>:


void Timer0_Init(void)
{
	//Choosing the normal mode
	TCCR0 |= 0x00;
 4a6:	83 b7       	in	r24, 0x33	; 51
 4a8:	83 bf       	out	0x33, r24	; 51
	//Setting the initial value
	TCNT0 |= 0x00;
 4aa:	82 b7       	in	r24, 0x32	; 50
 4ac:	82 bf       	out	0x32, r24	; 50
 4ae:	08 95       	ret

000004b0 <Start_Timer>:

void Start_Timer(void)
{
	
	// Setting prescaler 1024
	TCCR0 |= (1 << CS00) | (1<< CS02);
 4b0:	83 b7       	in	r24, 0x33	; 51
 4b2:	85 60       	ori	r24, 0x05	; 5
 4b4:	83 bf       	out	0x33, r24	; 51
 4b6:	08 95       	ret

000004b8 <Timer0_Delay>:




void Timer0_Delay(int time_delay)
{
 4b8:	cf 92       	push	r12
 4ba:	df 92       	push	r13
 4bc:	ef 92       	push	r14
 4be:	ff 92       	push	r15
 4c0:	0f 93       	push	r16
 4c2:	1f 93       	push	r17
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	8c 01       	movw	r16, r24
	// Tmaxdelay = Ttick * 2^n -> 8-bit timer
	T_MaxDelay = T_Tick * 256;
	
	
	// FIRST CASE
	if(time_delay < T_MaxDelay)
 4ca:	bc 01       	movw	r22, r24
 4cc:	99 0f       	add	r25, r25
 4ce:	88 0b       	sbc	r24, r24
 4d0:	99 0b       	sbc	r25, r25
 4d2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__floatsisf>
 4d6:	6b 01       	movw	r12, r22
 4d8:	7c 01       	movw	r14, r24
 4da:	20 e0       	ldi	r18, 0x00	; 0
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	40 e8       	ldi	r20, 0x80	; 128
 4e0:	53 e4       	ldi	r21, 0x43	; 67
 4e2:	0e 94 c3 02 	call	0x586	; 0x586 <__cmpsf2>
 4e6:	88 23       	and	r24, r24
 4e8:	dc f0       	brlt	.+54     	; 0x520 <Timer0_Delay+0x68>
		Number_of_Overflows = 1;
	}
	
	
	// SECOND CASE
	else if (time_delay == (int)T_MaxDelay)
 4ea:	01 15       	cp	r16, r1
 4ec:	11 40       	sbci	r17, 0x01	; 1
 4ee:	d9 f0       	breq	.+54     	; 0x526 <Timer0_Delay+0x6e>
	}
	
	
	
	// THIRD CASE
	else if (time_delay > T_MaxDelay)
 4f0:	20 e0       	ldi	r18, 0x00	; 0
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	40 e8       	ldi	r20, 0x80	; 128
 4f6:	53 e4       	ldi	r21, 0x43	; 67
 4f8:	c7 01       	movw	r24, r14
 4fa:	b6 01       	movw	r22, r12
 4fc:	0e 94 c2 03 	call	0x784	; 0x784 <__gesf2>
 500:	18 16       	cp	r1, r24
 502:	9c f4       	brge	.+38     	; 0x52a <Timer0_Delay+0x72>
	{
		Number_of_Overflows = ceil ((double)time_delay/T_MaxDelay);
 504:	20 e0       	ldi	r18, 0x00	; 0
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	40 e8       	ldi	r20, 0x80	; 128
 50a:	5b e3       	ldi	r21, 0x3B	; 59
 50c:	c7 01       	movw	r24, r14
 50e:	b6 01       	movw	r22, r12
 510:	0e 94 c7 03 	call	0x78e	; 0x78e <__mulsf3>
 514:	0e 94 ac 02 	call	0x558	; 0x558 <ceil>
 518:	0e 94 c8 02 	call	0x590	; 0x590 <__fixunssfsi>
 51c:	eb 01       	movw	r28, r22
 51e:	05 c0       	rjmp	.+10     	; 0x52a <Timer0_Delay+0x72>
	
	// FIRST CASE
	if(time_delay < T_MaxDelay)
	{
		Timer_InitialValue = (T_MaxDelay - time_delay)/T_Tick;
		Number_of_Overflows = 1;
 520:	c1 e0       	ldi	r28, 0x01	; 1
 522:	d0 e0       	ldi	r29, 0x00	; 0
 524:	02 c0       	rjmp	.+4      	; 0x52a <Timer0_Delay+0x72>
	
	// SECOND CASE
	else if (time_delay == (int)T_MaxDelay)
	{
		Timer_InitialValue =0;
		Number_of_Overflows = 1;
 526:	c1 e0       	ldi	r28, 0x01	; 1
 528:	d0 e0       	ldi	r29, 0x00	; 0
	
	// FIRST CASE
	if(time_delay < T_MaxDelay)
	{
		Timer_InitialValue = (T_MaxDelay - time_delay)/T_Tick;
		Number_of_Overflows = 1;
 52a:	20 e0       	ldi	r18, 0x00	; 0
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	08 c0       	rjmp	.+16     	; 0x540 <Timer0_Delay+0x88>
	
	
	// WAITING FOR OVERFLOW FLAG
	while (Overflow_Counter < Number_of_Overflows)
	{
		while (( TIFR & (1<<0) )==0 )
 530:	08 b6       	in	r0, 0x38	; 56
 532:	00 fe       	sbrs	r0, 0
 534:	fd cf       	rjmp	.-6      	; 0x530 <Timer0_Delay+0x78>
		{
			//	 wait for the flag
		}
		//clear the overflow flag
		TIFR |= (1<<0);
 536:	88 b7       	in	r24, 0x38	; 56
 538:	81 60       	ori	r24, 0x01	; 1
 53a:	88 bf       	out	0x38, r24	; 56
		Overflow_Counter++;
 53c:	2f 5f       	subi	r18, 0xFF	; 255
 53e:	3f 4f       	sbci	r19, 0xFF	; 255
	
	
	
	
	// WAITING FOR OVERFLOW FLAG
	while (Overflow_Counter < Number_of_Overflows)
 540:	2c 17       	cp	r18, r28
 542:	3d 07       	cpc	r19, r29
 544:	a8 f3       	brcs	.-22     	; 0x530 <Timer0_Delay+0x78>
		//clear the overflow flag
		TIFR |= (1<<0);
		Overflow_Counter++;
	}
	Overflow_Counter =0;
}
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	1f 91       	pop	r17
 54c:	0f 91       	pop	r16
 54e:	ff 90       	pop	r15
 550:	ef 90       	pop	r14
 552:	df 90       	pop	r13
 554:	cf 90       	pop	r12
 556:	08 95       	ret

00000558 <ceil>:
 558:	0e 94 a3 03 	call	0x746	; 0x746 <__fp_trunc>
 55c:	90 f0       	brcs	.+36     	; 0x582 <ceil+0x2a>
 55e:	9f 37       	cpi	r25, 0x7F	; 127
 560:	48 f4       	brcc	.+18     	; 0x574 <ceil+0x1c>
 562:	91 11       	cpse	r25, r1
 564:	16 f4       	brtc	.+4      	; 0x56a <ceil+0x12>
 566:	0c 94 bc 03 	jmp	0x778	; 0x778 <__fp_szero>
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	70 e0       	ldi	r23, 0x00	; 0
 56e:	80 e8       	ldi	r24, 0x80	; 128
 570:	9f e3       	ldi	r25, 0x3F	; 63
 572:	08 95       	ret
 574:	26 f0       	brts	.+8      	; 0x57e <ceil+0x26>
 576:	1b 16       	cp	r1, r27
 578:	61 1d       	adc	r22, r1
 57a:	71 1d       	adc	r23, r1
 57c:	81 1d       	adc	r24, r1
 57e:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_mintl>
 582:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <__fp_mpack>

00000586 <__cmpsf2>:
 586:	0e 94 34 03 	call	0x668	; 0x668 <__fp_cmp>
 58a:	08 f4       	brcc	.+2      	; 0x58e <__cmpsf2+0x8>
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	08 95       	ret

00000590 <__fixunssfsi>:
 590:	0e 94 89 03 	call	0x712	; 0x712 <__fp_splitA>
 594:	88 f0       	brcs	.+34     	; 0x5b8 <__fixunssfsi+0x28>
 596:	9f 57       	subi	r25, 0x7F	; 127
 598:	98 f0       	brcs	.+38     	; 0x5c0 <__fixunssfsi+0x30>
 59a:	b9 2f       	mov	r27, r25
 59c:	99 27       	eor	r25, r25
 59e:	b7 51       	subi	r27, 0x17	; 23
 5a0:	b0 f0       	brcs	.+44     	; 0x5ce <__fixunssfsi+0x3e>
 5a2:	e1 f0       	breq	.+56     	; 0x5dc <__fixunssfsi+0x4c>
 5a4:	66 0f       	add	r22, r22
 5a6:	77 1f       	adc	r23, r23
 5a8:	88 1f       	adc	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	1a f0       	brmi	.+6      	; 0x5b4 <__fixunssfsi+0x24>
 5ae:	ba 95       	dec	r27
 5b0:	c9 f7       	brne	.-14     	; 0x5a4 <__fixunssfsi+0x14>
 5b2:	14 c0       	rjmp	.+40     	; 0x5dc <__fixunssfsi+0x4c>
 5b4:	b1 30       	cpi	r27, 0x01	; 1
 5b6:	91 f0       	breq	.+36     	; 0x5dc <__fixunssfsi+0x4c>
 5b8:	0e 94 bb 03 	call	0x776	; 0x776 <__fp_zero>
 5bc:	b1 e0       	ldi	r27, 0x01	; 1
 5be:	08 95       	ret
 5c0:	0c 94 bb 03 	jmp	0x776	; 0x776 <__fp_zero>
 5c4:	67 2f       	mov	r22, r23
 5c6:	78 2f       	mov	r23, r24
 5c8:	88 27       	eor	r24, r24
 5ca:	b8 5f       	subi	r27, 0xF8	; 248
 5cc:	39 f0       	breq	.+14     	; 0x5dc <__fixunssfsi+0x4c>
 5ce:	b9 3f       	cpi	r27, 0xF9	; 249
 5d0:	cc f3       	brlt	.-14     	; 0x5c4 <__fixunssfsi+0x34>
 5d2:	86 95       	lsr	r24
 5d4:	77 95       	ror	r23
 5d6:	67 95       	ror	r22
 5d8:	b3 95       	inc	r27
 5da:	d9 f7       	brne	.-10     	; 0x5d2 <__fixunssfsi+0x42>
 5dc:	3e f4       	brtc	.+14     	; 0x5ec <__fixunssfsi+0x5c>
 5de:	90 95       	com	r25
 5e0:	80 95       	com	r24
 5e2:	70 95       	com	r23
 5e4:	61 95       	neg	r22
 5e6:	7f 4f       	sbci	r23, 0xFF	; 255
 5e8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ea:	9f 4f       	sbci	r25, 0xFF	; 255
 5ec:	08 95       	ret

000005ee <__floatunsisf>:
 5ee:	e8 94       	clt
 5f0:	09 c0       	rjmp	.+18     	; 0x604 <__floatsisf+0x12>

000005f2 <__floatsisf>:
 5f2:	97 fb       	bst	r25, 7
 5f4:	3e f4       	brtc	.+14     	; 0x604 <__floatsisf+0x12>
 5f6:	90 95       	com	r25
 5f8:	80 95       	com	r24
 5fa:	70 95       	com	r23
 5fc:	61 95       	neg	r22
 5fe:	7f 4f       	sbci	r23, 0xFF	; 255
 600:	8f 4f       	sbci	r24, 0xFF	; 255
 602:	9f 4f       	sbci	r25, 0xFF	; 255
 604:	99 23       	and	r25, r25
 606:	a9 f0       	breq	.+42     	; 0x632 <__floatsisf+0x40>
 608:	f9 2f       	mov	r31, r25
 60a:	96 e9       	ldi	r25, 0x96	; 150
 60c:	bb 27       	eor	r27, r27
 60e:	93 95       	inc	r25
 610:	f6 95       	lsr	r31
 612:	87 95       	ror	r24
 614:	77 95       	ror	r23
 616:	67 95       	ror	r22
 618:	b7 95       	ror	r27
 61a:	f1 11       	cpse	r31, r1
 61c:	f8 cf       	rjmp	.-16     	; 0x60e <__floatsisf+0x1c>
 61e:	fa f4       	brpl	.+62     	; 0x65e <__floatsisf+0x6c>
 620:	bb 0f       	add	r27, r27
 622:	11 f4       	brne	.+4      	; 0x628 <__floatsisf+0x36>
 624:	60 ff       	sbrs	r22, 0
 626:	1b c0       	rjmp	.+54     	; 0x65e <__floatsisf+0x6c>
 628:	6f 5f       	subi	r22, 0xFF	; 255
 62a:	7f 4f       	sbci	r23, 0xFF	; 255
 62c:	8f 4f       	sbci	r24, 0xFF	; 255
 62e:	9f 4f       	sbci	r25, 0xFF	; 255
 630:	16 c0       	rjmp	.+44     	; 0x65e <__floatsisf+0x6c>
 632:	88 23       	and	r24, r24
 634:	11 f0       	breq	.+4      	; 0x63a <__floatsisf+0x48>
 636:	96 e9       	ldi	r25, 0x96	; 150
 638:	11 c0       	rjmp	.+34     	; 0x65c <__floatsisf+0x6a>
 63a:	77 23       	and	r23, r23
 63c:	21 f0       	breq	.+8      	; 0x646 <__floatsisf+0x54>
 63e:	9e e8       	ldi	r25, 0x8E	; 142
 640:	87 2f       	mov	r24, r23
 642:	76 2f       	mov	r23, r22
 644:	05 c0       	rjmp	.+10     	; 0x650 <__floatsisf+0x5e>
 646:	66 23       	and	r22, r22
 648:	71 f0       	breq	.+28     	; 0x666 <__floatsisf+0x74>
 64a:	96 e8       	ldi	r25, 0x86	; 134
 64c:	86 2f       	mov	r24, r22
 64e:	70 e0       	ldi	r23, 0x00	; 0
 650:	60 e0       	ldi	r22, 0x00	; 0
 652:	2a f0       	brmi	.+10     	; 0x65e <__floatsisf+0x6c>
 654:	9a 95       	dec	r25
 656:	66 0f       	add	r22, r22
 658:	77 1f       	adc	r23, r23
 65a:	88 1f       	adc	r24, r24
 65c:	da f7       	brpl	.-10     	; 0x654 <__floatsisf+0x62>
 65e:	88 0f       	add	r24, r24
 660:	96 95       	lsr	r25
 662:	87 95       	ror	r24
 664:	97 f9       	bld	r25, 7
 666:	08 95       	ret

00000668 <__fp_cmp>:
 668:	99 0f       	add	r25, r25
 66a:	00 08       	sbc	r0, r0
 66c:	55 0f       	add	r21, r21
 66e:	aa 0b       	sbc	r26, r26
 670:	e0 e8       	ldi	r30, 0x80	; 128
 672:	fe ef       	ldi	r31, 0xFE	; 254
 674:	16 16       	cp	r1, r22
 676:	17 06       	cpc	r1, r23
 678:	e8 07       	cpc	r30, r24
 67a:	f9 07       	cpc	r31, r25
 67c:	c0 f0       	brcs	.+48     	; 0x6ae <__fp_cmp+0x46>
 67e:	12 16       	cp	r1, r18
 680:	13 06       	cpc	r1, r19
 682:	e4 07       	cpc	r30, r20
 684:	f5 07       	cpc	r31, r21
 686:	98 f0       	brcs	.+38     	; 0x6ae <__fp_cmp+0x46>
 688:	62 1b       	sub	r22, r18
 68a:	73 0b       	sbc	r23, r19
 68c:	84 0b       	sbc	r24, r20
 68e:	95 0b       	sbc	r25, r21
 690:	39 f4       	brne	.+14     	; 0x6a0 <__fp_cmp+0x38>
 692:	0a 26       	eor	r0, r26
 694:	61 f0       	breq	.+24     	; 0x6ae <__fp_cmp+0x46>
 696:	23 2b       	or	r18, r19
 698:	24 2b       	or	r18, r20
 69a:	25 2b       	or	r18, r21
 69c:	21 f4       	brne	.+8      	; 0x6a6 <__fp_cmp+0x3e>
 69e:	08 95       	ret
 6a0:	0a 26       	eor	r0, r26
 6a2:	09 f4       	brne	.+2      	; 0x6a6 <__fp_cmp+0x3e>
 6a4:	a1 40       	sbci	r26, 0x01	; 1
 6a6:	a6 95       	lsr	r26
 6a8:	8f ef       	ldi	r24, 0xFF	; 255
 6aa:	81 1d       	adc	r24, r1
 6ac:	81 1d       	adc	r24, r1
 6ae:	08 95       	ret

000006b0 <__fp_mintl>:
 6b0:	88 23       	and	r24, r24
 6b2:	71 f4       	brne	.+28     	; 0x6d0 <__fp_mintl+0x20>
 6b4:	77 23       	and	r23, r23
 6b6:	21 f0       	breq	.+8      	; 0x6c0 <__fp_mintl+0x10>
 6b8:	98 50       	subi	r25, 0x08	; 8
 6ba:	87 2b       	or	r24, r23
 6bc:	76 2f       	mov	r23, r22
 6be:	07 c0       	rjmp	.+14     	; 0x6ce <__fp_mintl+0x1e>
 6c0:	66 23       	and	r22, r22
 6c2:	11 f4       	brne	.+4      	; 0x6c8 <__fp_mintl+0x18>
 6c4:	99 27       	eor	r25, r25
 6c6:	0d c0       	rjmp	.+26     	; 0x6e2 <__fp_mintl+0x32>
 6c8:	90 51       	subi	r25, 0x10	; 16
 6ca:	86 2b       	or	r24, r22
 6cc:	70 e0       	ldi	r23, 0x00	; 0
 6ce:	60 e0       	ldi	r22, 0x00	; 0
 6d0:	2a f0       	brmi	.+10     	; 0x6dc <__fp_mintl+0x2c>
 6d2:	9a 95       	dec	r25
 6d4:	66 0f       	add	r22, r22
 6d6:	77 1f       	adc	r23, r23
 6d8:	88 1f       	adc	r24, r24
 6da:	da f7       	brpl	.-10     	; 0x6d2 <__fp_mintl+0x22>
 6dc:	88 0f       	add	r24, r24
 6de:	96 95       	lsr	r25
 6e0:	87 95       	ror	r24
 6e2:	97 f9       	bld	r25, 7
 6e4:	08 95       	ret

000006e6 <__fp_mpack>:
 6e6:	9f 3f       	cpi	r25, 0xFF	; 255
 6e8:	31 f0       	breq	.+12     	; 0x6f6 <__fp_mpack_finite+0xc>

000006ea <__fp_mpack_finite>:
 6ea:	91 50       	subi	r25, 0x01	; 1
 6ec:	20 f4       	brcc	.+8      	; 0x6f6 <__fp_mpack_finite+0xc>
 6ee:	87 95       	ror	r24
 6f0:	77 95       	ror	r23
 6f2:	67 95       	ror	r22
 6f4:	b7 95       	ror	r27
 6f6:	88 0f       	add	r24, r24
 6f8:	91 1d       	adc	r25, r1
 6fa:	96 95       	lsr	r25
 6fc:	87 95       	ror	r24
 6fe:	97 f9       	bld	r25, 7
 700:	08 95       	ret

00000702 <__fp_split3>:
 702:	57 fd       	sbrc	r21, 7
 704:	90 58       	subi	r25, 0x80	; 128
 706:	44 0f       	add	r20, r20
 708:	55 1f       	adc	r21, r21
 70a:	59 f0       	breq	.+22     	; 0x722 <__fp_splitA+0x10>
 70c:	5f 3f       	cpi	r21, 0xFF	; 255
 70e:	71 f0       	breq	.+28     	; 0x72c <__fp_splitA+0x1a>
 710:	47 95       	ror	r20

00000712 <__fp_splitA>:
 712:	88 0f       	add	r24, r24
 714:	97 fb       	bst	r25, 7
 716:	99 1f       	adc	r25, r25
 718:	61 f0       	breq	.+24     	; 0x732 <__fp_splitA+0x20>
 71a:	9f 3f       	cpi	r25, 0xFF	; 255
 71c:	79 f0       	breq	.+30     	; 0x73c <__fp_splitA+0x2a>
 71e:	87 95       	ror	r24
 720:	08 95       	ret
 722:	12 16       	cp	r1, r18
 724:	13 06       	cpc	r1, r19
 726:	14 06       	cpc	r1, r20
 728:	55 1f       	adc	r21, r21
 72a:	f2 cf       	rjmp	.-28     	; 0x710 <__fp_split3+0xe>
 72c:	46 95       	lsr	r20
 72e:	f1 df       	rcall	.-30     	; 0x712 <__fp_splitA>
 730:	08 c0       	rjmp	.+16     	; 0x742 <__fp_splitA+0x30>
 732:	16 16       	cp	r1, r22
 734:	17 06       	cpc	r1, r23
 736:	18 06       	cpc	r1, r24
 738:	99 1f       	adc	r25, r25
 73a:	f1 cf       	rjmp	.-30     	; 0x71e <__fp_splitA+0xc>
 73c:	86 95       	lsr	r24
 73e:	71 05       	cpc	r23, r1
 740:	61 05       	cpc	r22, r1
 742:	08 94       	sec
 744:	08 95       	ret

00000746 <__fp_trunc>:
 746:	0e 94 89 03 	call	0x712	; 0x712 <__fp_splitA>
 74a:	a0 f0       	brcs	.+40     	; 0x774 <__fp_trunc+0x2e>
 74c:	be e7       	ldi	r27, 0x7E	; 126
 74e:	b9 17       	cp	r27, r25
 750:	88 f4       	brcc	.+34     	; 0x774 <__fp_trunc+0x2e>
 752:	bb 27       	eor	r27, r27
 754:	9f 38       	cpi	r25, 0x8F	; 143
 756:	60 f4       	brcc	.+24     	; 0x770 <__fp_trunc+0x2a>
 758:	16 16       	cp	r1, r22
 75a:	b1 1d       	adc	r27, r1
 75c:	67 2f       	mov	r22, r23
 75e:	78 2f       	mov	r23, r24
 760:	88 27       	eor	r24, r24
 762:	98 5f       	subi	r25, 0xF8	; 248
 764:	f7 cf       	rjmp	.-18     	; 0x754 <__fp_trunc+0xe>
 766:	86 95       	lsr	r24
 768:	77 95       	ror	r23
 76a:	67 95       	ror	r22
 76c:	b1 1d       	adc	r27, r1
 76e:	93 95       	inc	r25
 770:	96 39       	cpi	r25, 0x96	; 150
 772:	c8 f3       	brcs	.-14     	; 0x766 <__fp_trunc+0x20>
 774:	08 95       	ret

00000776 <__fp_zero>:
 776:	e8 94       	clt

00000778 <__fp_szero>:
 778:	bb 27       	eor	r27, r27
 77a:	66 27       	eor	r22, r22
 77c:	77 27       	eor	r23, r23
 77e:	cb 01       	movw	r24, r22
 780:	97 f9       	bld	r25, 7
 782:	08 95       	ret

00000784 <__gesf2>:
 784:	0e 94 34 03 	call	0x668	; 0x668 <__fp_cmp>
 788:	08 f4       	brcc	.+2      	; 0x78c <__gesf2+0x8>
 78a:	8f ef       	ldi	r24, 0xFF	; 255
 78c:	08 95       	ret

0000078e <__mulsf3>:
 78e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__mulsf3x>
 792:	0c 94 4b 04 	jmp	0x896	; 0x896 <__fp_round>
 796:	0e 94 3d 04 	call	0x87a	; 0x87a <__fp_pscA>
 79a:	38 f0       	brcs	.+14     	; 0x7aa <__mulsf3+0x1c>
 79c:	0e 94 44 04 	call	0x888	; 0x888 <__fp_pscB>
 7a0:	20 f0       	brcs	.+8      	; 0x7aa <__mulsf3+0x1c>
 7a2:	95 23       	and	r25, r21
 7a4:	11 f0       	breq	.+4      	; 0x7aa <__mulsf3+0x1c>
 7a6:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_inf>
 7aa:	0c 94 3a 04 	jmp	0x874	; 0x874 <__fp_nan>
 7ae:	11 24       	eor	r1, r1
 7b0:	0c 94 bc 03 	jmp	0x778	; 0x778 <__fp_szero>

000007b4 <__mulsf3x>:
 7b4:	0e 94 81 03 	call	0x702	; 0x702 <__fp_split3>
 7b8:	70 f3       	brcs	.-36     	; 0x796 <__mulsf3+0x8>

000007ba <__mulsf3_pse>:
 7ba:	95 9f       	mul	r25, r21
 7bc:	c1 f3       	breq	.-16     	; 0x7ae <__mulsf3+0x20>
 7be:	95 0f       	add	r25, r21
 7c0:	50 e0       	ldi	r21, 0x00	; 0
 7c2:	55 1f       	adc	r21, r21
 7c4:	62 9f       	mul	r22, r18
 7c6:	f0 01       	movw	r30, r0
 7c8:	72 9f       	mul	r23, r18
 7ca:	bb 27       	eor	r27, r27
 7cc:	f0 0d       	add	r31, r0
 7ce:	b1 1d       	adc	r27, r1
 7d0:	63 9f       	mul	r22, r19
 7d2:	aa 27       	eor	r26, r26
 7d4:	f0 0d       	add	r31, r0
 7d6:	b1 1d       	adc	r27, r1
 7d8:	aa 1f       	adc	r26, r26
 7da:	64 9f       	mul	r22, r20
 7dc:	66 27       	eor	r22, r22
 7de:	b0 0d       	add	r27, r0
 7e0:	a1 1d       	adc	r26, r1
 7e2:	66 1f       	adc	r22, r22
 7e4:	82 9f       	mul	r24, r18
 7e6:	22 27       	eor	r18, r18
 7e8:	b0 0d       	add	r27, r0
 7ea:	a1 1d       	adc	r26, r1
 7ec:	62 1f       	adc	r22, r18
 7ee:	73 9f       	mul	r23, r19
 7f0:	b0 0d       	add	r27, r0
 7f2:	a1 1d       	adc	r26, r1
 7f4:	62 1f       	adc	r22, r18
 7f6:	83 9f       	mul	r24, r19
 7f8:	a0 0d       	add	r26, r0
 7fa:	61 1d       	adc	r22, r1
 7fc:	22 1f       	adc	r18, r18
 7fe:	74 9f       	mul	r23, r20
 800:	33 27       	eor	r19, r19
 802:	a0 0d       	add	r26, r0
 804:	61 1d       	adc	r22, r1
 806:	23 1f       	adc	r18, r19
 808:	84 9f       	mul	r24, r20
 80a:	60 0d       	add	r22, r0
 80c:	21 1d       	adc	r18, r1
 80e:	82 2f       	mov	r24, r18
 810:	76 2f       	mov	r23, r22
 812:	6a 2f       	mov	r22, r26
 814:	11 24       	eor	r1, r1
 816:	9f 57       	subi	r25, 0x7F	; 127
 818:	50 40       	sbci	r21, 0x00	; 0
 81a:	9a f0       	brmi	.+38     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 81c:	f1 f0       	breq	.+60     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 81e:	88 23       	and	r24, r24
 820:	4a f0       	brmi	.+18     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 822:	ee 0f       	add	r30, r30
 824:	ff 1f       	adc	r31, r31
 826:	bb 1f       	adc	r27, r27
 828:	66 1f       	adc	r22, r22
 82a:	77 1f       	adc	r23, r23
 82c:	88 1f       	adc	r24, r24
 82e:	91 50       	subi	r25, 0x01	; 1
 830:	50 40       	sbci	r21, 0x00	; 0
 832:	a9 f7       	brne	.-22     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 834:	9e 3f       	cpi	r25, 0xFE	; 254
 836:	51 05       	cpc	r21, r1
 838:	80 f0       	brcs	.+32     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 83a:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_inf>
 83e:	0c 94 bc 03 	jmp	0x778	; 0x778 <__fp_szero>
 842:	5f 3f       	cpi	r21, 0xFF	; 255
 844:	e4 f3       	brlt	.-8      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 846:	98 3e       	cpi	r25, 0xE8	; 232
 848:	d4 f3       	brlt	.-12     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 84a:	86 95       	lsr	r24
 84c:	77 95       	ror	r23
 84e:	67 95       	ror	r22
 850:	b7 95       	ror	r27
 852:	f7 95       	ror	r31
 854:	e7 95       	ror	r30
 856:	9f 5f       	subi	r25, 0xFF	; 255
 858:	c1 f7       	brne	.-16     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 85a:	fe 2b       	or	r31, r30
 85c:	88 0f       	add	r24, r24
 85e:	91 1d       	adc	r25, r1
 860:	96 95       	lsr	r25
 862:	87 95       	ror	r24
 864:	97 f9       	bld	r25, 7
 866:	08 95       	ret

00000868 <__fp_inf>:
 868:	97 f9       	bld	r25, 7
 86a:	9f 67       	ori	r25, 0x7F	; 127
 86c:	80 e8       	ldi	r24, 0x80	; 128
 86e:	70 e0       	ldi	r23, 0x00	; 0
 870:	60 e0       	ldi	r22, 0x00	; 0
 872:	08 95       	ret

00000874 <__fp_nan>:
 874:	9f ef       	ldi	r25, 0xFF	; 255
 876:	80 ec       	ldi	r24, 0xC0	; 192
 878:	08 95       	ret

0000087a <__fp_pscA>:
 87a:	00 24       	eor	r0, r0
 87c:	0a 94       	dec	r0
 87e:	16 16       	cp	r1, r22
 880:	17 06       	cpc	r1, r23
 882:	18 06       	cpc	r1, r24
 884:	09 06       	cpc	r0, r25
 886:	08 95       	ret

00000888 <__fp_pscB>:
 888:	00 24       	eor	r0, r0
 88a:	0a 94       	dec	r0
 88c:	12 16       	cp	r1, r18
 88e:	13 06       	cpc	r1, r19
 890:	14 06       	cpc	r1, r20
 892:	05 06       	cpc	r0, r21
 894:	08 95       	ret

00000896 <__fp_round>:
 896:	09 2e       	mov	r0, r25
 898:	03 94       	inc	r0
 89a:	00 0c       	add	r0, r0
 89c:	11 f4       	brne	.+4      	; 0x8a2 <__fp_round+0xc>
 89e:	88 23       	and	r24, r24
 8a0:	52 f0       	brmi	.+20     	; 0x8b6 <__fp_round+0x20>
 8a2:	bb 0f       	add	r27, r27
 8a4:	40 f4       	brcc	.+16     	; 0x8b6 <__fp_round+0x20>
 8a6:	bf 2b       	or	r27, r31
 8a8:	11 f4       	brne	.+4      	; 0x8ae <__fp_round+0x18>
 8aa:	60 ff       	sbrs	r22, 0
 8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__fp_round+0x20>
 8ae:	6f 5f       	subi	r22, 0xFF	; 255
 8b0:	7f 4f       	sbci	r23, 0xFF	; 255
 8b2:	8f 4f       	sbci	r24, 0xFF	; 255
 8b4:	9f 4f       	sbci	r25, 0xFF	; 255
 8b6:	08 95       	ret

000008b8 <_exit>:
 8b8:	f8 94       	cli

000008ba <__stop_program>:
 8ba:	ff cf       	rjmp	.-2      	; 0x8ba <__stop_program>
